{
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:ComponentName} = (${2:props}) => {",
      "  return (",
      "    <div>",
      "      $0",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React Functional Component"
  },
  "React Functional Component with Props Interface": {
    "prefix": "rfcp",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:prop}: ${3:type};",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ ${2:prop} }) => {",
      "  return (",
      "    <div>",
      "      $0",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React Functional Component with Props Interface"
  },
  "useState Hook": {
    "prefix": "usestate",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState});"
    ],
    "description": "React useState Hook"
  },
  "useEffect Hook": {
    "prefix": "useeffect",
    "body": [
      "useEffect(() => {",
      "  ${1:effect}",
      "  ${2:return () => {",
      "    ${3:cleanup}",
      "  };}",
      "}, [${4:dependencies}]);"
    ],
    "description": "React useEffect Hook"
  },
  "useContext Hook": {
    "prefix": "usecontext",
    "body": [
      "const ${1:context} = useContext(${2:ContextName});"
    ],
    "description": "React useContext Hook"
  },
  "useRef Hook": {
    "prefix": "useref",
    "body": [
      "const ${1:ref} = useRef(${2:initialValue});"
    ],
    "description": "React useRef Hook"
  },
  "useMemo Hook": {
    "prefix": "usememo",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:dependencies}), [${3:dependencies}]);"
    ],
    "description": "React useMemo Hook"
  },
  "useCallback Hook": {
    "prefix": "usecallback",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "  () => {",
      "    ${2:callbackBody}",
      "  },",
      "  [${3:dependencies}],",
      ");"
    ],
    "description": "React useCallback Hook"
  },
  "React Fragment": {
    "prefix": "fragment",
    "body": [
      "<>",
      "  ${0}",
      "</>"
    ],
    "description": "React Fragment"
  },
  "Import React": {
    "prefix": "imr",
    "body": [
      "import React from 'react';"
    ],
    "description": "Import React"
  },
  "Import React and Component": {
    "prefix": "imrc",
    "body": [
      "import React, { Component } from 'react';"
    ],
    "description": "Import React, { Component }"
  },
  "Import React Hooks": {
    "prefix": "imrh",
    "body": [
      "import React, { ${1:useState, useEffect, useContext} } from 'react';"
    ],
    "description": "Import React with Hooks"
  }
} 